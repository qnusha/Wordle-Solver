#!/usr/bin/env python3


# import sys
# import errno
  
# try:
#     for i in range(4000):
#         print(i)
# except IOError as e:
#     if e.errno == errno.EPIPE:
#       pass
import socket
import argparse
from urllib.parse import urlparse

# variables that will change according to user input
HOST = "ftp.3700.network"  # the server's hostname or IP address
PORT = 21  # the default port used by the server
user = "bandaruan"
password = "oqWRt9FHQjhAXxBkMb06"
path = ""
clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
dataSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

def login():
    # create socket and connect to server
    clientSocket.connect((HOST, PORT)) # connect to server'
    # send start message
    mes = "USER " + user + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    start_data = data.decode("utf-8")
    print(start_data)

    mes = "PASS " + password + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    start_data = data.decode("utf-8")
    print(start_data)

    mes = "TYPE I" + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    start_data = data.decode("utf-8")
    print(start_data)

    mes = "MODE S" + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    start_data = data.decode("utf-8")
    print(start_data)

    mes = "STRU F" + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    start_data = data.decode("utf-8")

def parse_url(surl):
    output = urlparse(surl)
    global user, password, HOST, PORT, path

    user = output.username
    password = output.password
    HOST = output.hostname
    path = output.path
    print(user, password, HOST, PORT, path)
    login()

# open data socket
def pasv():
    mes1 = f"PASV\r\n"
    clientSocket.send(mes1.encode())
    print("sends")
    data = clientSocket.recv(4096)
    print("message")
    start_data = data.decode("utf-8")
    print(data)
    if "(" in start_data:
        numbers = start_data.split("(")
        print(numbers)
        numbers = numbers[1].split(")")
        numbers = numbers[0].split(",")
        data_host = str(".".join(numbers[0:4]))
        if len(numbers) >= 6:
            data_port = (int(numbers[4]) << 8) + int(numbers[5])
        print(data_host, data_port)
        dataSocket.connect((data_host, int(data_port))) # connect to data socket
        # send the data and then close it
        print("works")


# list path
def list(p):
    pasv()
    mes = "LIST "  + p + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    print(clientSocket.recv(10000).decode("utf-8"))
    data = dataSocket.recv(10000)
    dataSocket.close()
    start_data = data.decode("utf-8")
    print(start_data)
    clientSocket.close()

# upload file to FTP
def upload(ftpfile, local):
    pasv()
    mes = "STOR " + ftpfile + "\r\n"
    clientSocket.sendall(mes.encode())
    f = open(local, "rb") # open and read a local file
    byte = f.read()
    sendtosocket(byte)
    dataSocket.close()
    clientSocket.close()
    print('done')
def sendtosocket(byte):
    print(byte)
    dataSocket.sendall(byte)



# download file from FTP
def download(ftpfile, localfile):
    pasv()
    mes = f"RETR " + ftpfile + "\r\n" # src: ftp path
    clientSocket.sendall(mes.encode("utf-8"))
    print(clientSocket.recv(10000))
    data = dataSocket.recv(10000)
    dataSocket.close()
    start_data = data.decode("utf-8")
    f = open(localfile, 'wb')
    f.write(start_data)
    f.close()
    dataSocket.close()
    clientSocket.close()

# make directory
def makedir(p):
    mes = "MKD " + p + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    clientSocket.close()
    start_data = data.decode("utf-8")
    print(start_data)
    print(p)
    clientSocket.close()

# remove directory
def removedir(p):
    print(p)
    mes = "RMD " + p + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    start_data = data.decode("utf-8")
    print(start_data)
    clientSocket.close()

# remove file
def remfile(p):
    mes = "DELE " + p + "\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    clientSocket.close()
    start_data = data.decode("utf-8")
    print(start_data)
    clientSocket.close()

# quit server
def quitserver():
    mes = "QUIT\r\n"
    clientSocket.sendall(mes.encode("utf-8"))
    data = clientSocket.recv(10000)
    start_data = data.decode("utf-8")
    print(start_data)

# follows the operations: ls, mkdir, rm, rmdir, cp, and mv
def get_args():
    # Create the parser
    parser = argparse.ArgumentParser()
    # Add an argument
    parser.add_argument('operation', type=str, choices=['ls', 'mkdir', 'rm', 'rmdir', 'cp', 'mv'])
    parser.add_argument('param1', type=str)
    parser.add_argument('param2', type=str, nargs='?')

    # reads command script and parse urls in this format: 
    # ftp://[USER[:PASSWORD]@]HOST[:PORT]/PATH
    args = parser.parse_args() 
    args = vars(args) # Array for all arguments passed to commmand script
    print(args)
    if args['operation'] == 'ls':
        parse_url(args['param1'])
        list(path)
    if args['operation'] == 'mkdir':
        parse_url(args['param1'])
        makedir(path)
    if args['operation'] == 'rm':
        parse_url(args['param1'])
        remfile(path)
    if args['operation'] == 'rmdir':
        parse_url(args['param1'])
        removedir(path)
    if args['operation'] == 'cp':
        print((args['param1'])[0:4])
        if (args['param1'])[0:4] != "ftp:":
            parse_url(args['param2'])
            upload(path, str(args['param1']))
        if (args['param1'])[0:4] == "ftp:":
            parse_url(args['param1'])
            download(path, str(args['param2']))
    if args['operation'] == 'mv':
        if (args['param1'])[0:4] != "ftp:":
            parse_url(args['param1'])
            remfile(path)
            download(args['param1'], path)
        if (args['param2'])[0:4] == "ftp":
            parse_url(args['param2'])
            remfile(path)
            download(args['param2'], path)
get_args()
